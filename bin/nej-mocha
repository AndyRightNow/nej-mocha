#!/usr/bin/env node

const {
    spawn,
    exec
} = require('child_process');
const path = require('path');
const CDP = require('chrome-remote-interface');
const treeKill = require('tree-kill');

const server = require('./../server');
const config = require('./../config');
const userConfig = require('./../src/get-user-config');
const parseReport = require('./../src/parse-report');
const printReport = require('./../src/print-report');
const {
    printGreen,
    printRed,
    printNewLine,
    print,
    printAndNewLine
} = require('./../src/util');

const testRunnerProcess = spawn(`"${userConfig.chromePath}"`.replace(/\"/g, ""), [
    "--remote-debugging-port=9222",
]);

CDP((client) => {
    // extract domains
    const {
        Network,
        Page,
        DOM,
        Runtime
    } = client;

    Page.loadEventFired(() => {
        DOM.enable()
            .then(() => {
                return Runtime.evaluate({
                    expression: `globalPromise`
                });
            })
            .then((res) => {
                printGreen(" Tests are running...");

                return Runtime.awaitPromise({
                    promiseObjectId: res.result.objectId
                });
            })
            .then(() => DOM.getDocument())
            .then((res) => {
                return parseReport(DOM, res.root.nodeId);
            })
            .then((res) => {
                testRunnerProcess.kill(0);
                return printReport(res);
            })
            .then((res) => {
                process.exit(0);
            })
            .catch((err) => {
                printAndNewLine(err);
                printRed(`  Something went wrong. Please restart the tests and try again.`);
                testRunnerProcess.kill(0);
                process.exit(0);
            });
    });

    // enable events then start!
    Promise.all([
            Network.enable(),
            Page.enable(),
            Runtime.enable()
        ]).then(() => {
            Runtime.consoleAPICalled((options) => {
                if (options.type === 'log') {
                    let output = options.args.reduce((prev, cur) => `${prev && prev.value ? prev.value : prev} ${cur.value}`);
                    output = typeof output === "string" ? output : output ? output.value : "";

                    if (!/^do\ /.test(output)) {
                        print(`  ${output}`);
                    }
                }
            });

            return Page.navigate({
                url: `http://${userConfig.proxy.host}:${userConfig.proxy.port}/${config.TEST_INDEX}`
            });
        })
        .catch((err) => {
            testRunnerProcess.kill(0);
            process.exit(0);
            client.close();
        });
}).on('error', (err) => {
    // cannot connect to the remote endpoint
    printNewLine();
    printRed("  Please close all chrome browser processes before you start the tests.");
    treeKill(testRunnerProcess.pid, 'SIGHUP', () => {
        process.exit(0);
    });
});