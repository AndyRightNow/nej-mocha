#!/usr/bin/env node

var server = require('./../src/node/server');
var config = require('./../src/shared/config');
var generateCoverage = require('./../src/node/generate-coverage');
var userConfig = require('./../src/node/get-user-config');
var util = require('./../src/node/util');

var Nightmare = require('nightmare');
var nightmare = Nightmare({
    show: !userConfig.headless
});

var addr = 'http://localhost:' + userConfig.testRunnerPort + '/' + config.CONSTANT.TEST_INDEX;
var doneFlag = false;
var coverageFlag = false;

function exitProcess(s) {
    if (userConfig.shouldBrowserClosed) {
        s.close();
        process.exit(0);
    }
}

var runningServer = server.listen(userConfig.testRunnerPort, function () {
    console.log("  Test server is running on " + userConfig.testRunnerPort);
    console.log("  Tests are starting...");

    nightmare
        .viewport(1024, 768)
        .on('page', function (type, message, stack) {
            if (type === 'error') {
                util.printRed("  " + message);
                util.printRed("  " + stack);

                exitProcess(runningServer);
            }
        })
        .on('console', function () {
            var args = Array.from(arguments);
            var type = args[0];
            args = args.slice(1);
            var content = args.join('');

            if (type === 'log' &&
                !/^do|circular|alternately/.test(content)) {
                let results = args.map(function (v) {
                    return typeof v === 'string' ? v.replace('✓', '\u221A').replace('✖', '\u00D7').replace('․', '.') : v.toString();
                }).filter(function (v) {
                    return !/stdout\:/.test(v)
                });

                console.log.apply(console, results);
            } else if (type === 'warn') {
                if (new RegExp(config.CONSTANT.MOCHA_DONE_SIGNAL).test(content)) {
                    doneFlag = true;

                    if (coverageFlag && doneFlag) {
                        exitProcess(runningServer);
                    }
                } else if (new RegExp(config.CONSTANT.HAS_COVERAGE_SIGNAL).test(content)) {
                    var coverage = JSON.parse(args[1]);
                    coverageFlag = true;

                    if (userConfig.coverage) {
                        generateCoverage(coverage, function (err) {
                            if (err) {
                                util.printRed('  ' + err);
                            }

                            if (doneFlag) {
                                exitProcess(runningServer);
                            }
                        });
                    } else {
                        if (doneFlag) {
                            exitProcess(runningServer);
                        }
                    }
                }
            }
        })
        .goto(addr)
        .catch(function (err) {
            util.printRed("  " + err);

            exitProcess(runningServer);
        });
});