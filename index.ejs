<html>
<head>
    <meta charset="utf-8">
    <!-- encoding must be set for mocha's special characters to render properly -->
    <link rel="stylesheet" href="http://localhost:<%= PORT %>/node_modules/mocha/mocha.css" />\
    <script>
        (<%- globalsInjector %>)('<%- globalJSON %>');

        window.dependencyInjectionArr = <% if (dependencyInjectionArr) {%> <%- JSON.stringify(dependencyInjectionArr) %> <% } else {%> [] <% } %>;
    </script>
</head>

<body>
    <div id="mocha"></div>
    <% for (var i = 0; i < scriptsToInject.length; i++) {%>
    <script src="<%- scriptsToInject[i] %>"></script>
    <% } %>
    <% if (nestedDependencies) { %>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/mocha/mocha.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/chai/chai.js"></script>
    <% } else { %>
    <script src="http://localhost:<%= PORT %>/node_modules/mocha/mocha.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/chai/chai.js"></script>
    <% } %>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/esprima/dist/esprima.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/lib/escodegen.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/istanbul/lib/instrumenter.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/bower_components/nej/src/define.js?<% for (var alias in nejPathAliases) { if (nejPathAliases.hasOwnProperty(alias)) {%><%- alias %>=http://localhost:<%= PORT %>/<%- nejPathAliases[alias] %>&<% }}%> "></script>
    <script>
        mocha.ui('bdd');
        <% for (var option in mochaOptions) { if (mochaOptions.hasOwnProperty(option)) { %>
        mocha.<%- option %> ? mocha.<%- option %>(<%- typeof mochaOptions[option] === "string" ? "'" : "" %><%- mochaOptions[option] %><%- typeof mochaOptions[option] === "string" ? "'" : "" %>) : undefined;
        <% }} %>
        expect = chai.expect;
    </script>
    <script>
        var originalFn = console.log;
        var originalDefine = NEJ.define;
        var instrumenter = new Instrumenter();

        NEJ.define = function (uri, deps, callback) {
            // Coverage
            var cb = typeof uri === 'function' ? uri : typeof deps === 'function' ? deps : callback;
            var filePath = new Error().stack.match(/(at.*)/g)[1].replace('at ', "").replace(/\:\d+\:\d+$/, "").replace(/^http:\/\/.*?\//, "");
            var cbStr = cb.toString();
            if (/nej-mocha-cover/.test(cbStr)) {
                var cbCode = cbStr.replace(/^function(.|[\r\n])*?\{[\s\r\n]*/, "").replace(/\}$/, "");
                var cbArgs = cbStr.match(/^function(.|[\r\n])*?\{/)[0].match(/\((.|[\r\n])*\)/)[0].replace(/[\(\)]/g, "").replace(/\/\/.*/g, "").replace(/\/\*(.|[\r\n])*\*\//g, "").replace(/[\s\r\n]/g, "").split(',');

                cbCode = instrumenter.instrumentSync(cbCode, filePath);

                cb = new Function(...cbArgs.concat([cbCode]));
            }

            // Dependency injections
            if (/nej-inject/.test(cbStr)) {
                var isNew = {};
                dependencyInjectionArr.forEach(d => isNew[d.path] = true);

                var deps = Array.isArray(uri) ? uri : Array.isArray(deps) ? deps : [];

                for (var injection of dependencyInjectionArr) {
                    var pattern = injection.pattern ? new RegExp(injection.pattern) : null;

                    if (pattern instanceof RegExp) {
                        for (var i = 0, l = deps.length; i < l; i++) {
                            if (pattern.test(deps[i]) && !isNew[deps[i]]) {
                                deps[i] = injection.path;
                            }
                        }
                    }
                }
            }

            originalDefine.call(NEJ, typeof uri === 'function' ? cb : uri, typeof deps === 'function' ? cb : deps, typeof callback === 'function' ? cb : callback);
        }
        
        // So that empty 'console.log()' is captured
        console.log = function () {
            if (!arguments.length) {
                originalFn.call(console, ' ');
            }
            else {
                originalFn.apply(console, arguments);
            }
        };

        var globalPromise = new Promise(function (resolve, reject) {
            define([
            <% for(var i = 0; i < testFiles.length; i++) {%>
                "<%- testFiles[i] %>",
            <% } %>
            ], function () {
                mocha.run(function (err) {
                    console.warn("TEST_MOCHA_DONE;");
                    console.warn("COVERAGE_OBJECT;", JSON.stringify(window.__coverage__ || {}));
                });
            });
        });
    </script>
</body>

</html>
