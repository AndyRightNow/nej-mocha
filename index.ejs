<html>
<head>
    <meta charset="utf-8">
    <!-- encoding must be set for mocha's special characters to render properly -->
    <link rel="stylesheet" href="http://localhost:<%= PORT %>/node_modules/mocha/mocha.css" />\
    <script>
        (<%- globalsInjector %>)('<%- globalJSON %>')
    </script>
</head>

<body>
    <div id="mocha"></div>
    <% for (var i = 0; i < scriptsToInject.length; i++) {%>
    <script src="<%- scriptsToInject[i] %>"></script>
    <% } %>
    <% if (nestedDependencies) { %>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/mocha/mocha.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/chai/chai.js"></script>
    <% } else { %>
    <script src="http://localhost:<%= PORT %>/node_modules/mocha/mocha.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/chai/chai.js"></script>
    <% } %>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/esprima/dist/esprima.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/lib/escodegen.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/node_modules/istanbul/lib/instrumenter.js"></script>
    <script src="http://localhost:<%= PORT %>/node_modules/nej-mocha/bower_components/nej/src/define.js?<% for (var alias in nejPathAliases) { if (nejPathAliases.hasOwnProperty(alias)) {%><%- alias %>=http://localhost:<%= PORT %>/<%- nejPathAliases[alias] %>&<% }}%> "></script>
    <script>
        mocha.ui('bdd');
        <% for (var option in mochaOptions) { if (mochaOptions.hasOwnProperty(option)) { %>
        mocha.<%- option %> ? mocha.<%- option %>(<%- typeof mochaOptions[option] === "string" ? "'" : "" %><%- mochaOptions[option] %><%- typeof mochaOptions[option] === "string" ? "'" : "" %>) : undefined;
        <% }} %>
        expect = chai.expect;
    </script>
    <script>
        let originalFn = console.log;
        let originalDefine = NEJ.define;
        let instrumenter = new Instrumenter();

        NEJ.define = function (uri, deps, callback) {
            let cb = typeof uri === 'function' ? uri : typeof deps === 'function' ? deps : callback;
            let filePath = new Error().stack.match(/(at.*)/g)[1].replace('at ', "").replace(/\:\d+\:\d+$/, "").replace(/^http:\/\/.*?\//, "");
            //.split(/[\\\/]/).splice(-2).join('/')
            if (/nej-mocha-cover/.test(cb.toString())) {
                let cbCode = cb.toString().replace(/^function(.|[\r\n])*?\{/, "").replace(/\}$/, "");
                let cbArgs = cb.toString().match(/^function(.|[\r\n])*?\{/)[0].match(/\((.|[\r\n])*\)/)[0].replace(/[\(\)]/g, "").replace(/\/\/.*/g, "").replace(/\/\*(.|[\r\n])*\*\//g, "").replace(/[\s\r\n]/g, "").split(',');

                cbCode = instrumenter.instrumentSync(cbCode, filePath);

                cb = new Function(...cbArgs.concat([cbCode]));
            }

            originalDefine.call(NEJ, typeof uri === 'function' ? cb : uri, typeof deps === 'function' ? cb : deps, typeof callback === 'function' ? cb : callback);
        }
        
        // So that empty 'console.log()' is captured through CDP
        console.log = function () {
            if (!arguments.length) {
                originalFn.call(console, ' ');
            }
            else {
                originalFn.apply(console, arguments);
            }
        };

        var globalPromise = new Promise((resolve, reject) => {
            define([
            <% for(var i = 0; i < testFiles.length; i++) {%>
                "<%- testFiles[i] %>",
            <% } %>
            ], function () {
                new Mocha.reporters.html((mocha, mocha.run(function (err) {
                    if (err) {
                        reject(new Error("Tests failed"));
                    }
                    else {
                        resolve(JSON.stringify(__coverage__));
                    }
                })));
            });
        });
    </script>
</body>

</html>
